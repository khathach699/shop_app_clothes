import 'package:flutter/material.dart';
import 'package:iconsax/iconsax.dart';
import 'package:share_plus/share_plus.dart';
import 'package:shop_app_clothes/pages/service/RatingService.dart';
import 'package:shop_app_clothes/utils/constants/size.dart';

class TRateAndShare extends StatelessWidget {
  final int productId; // Th√™m productId ƒë·ªÉ l·∫•y th√¥ng tin cho s·∫£n ph·∫©m c·ª• th·ªÉ

  const TRateAndShare({super.key, required this.productId});

  @override
  Widget build(BuildContext context) {
    void _shareProduct() {
      final String productLink = "http://10.0.2.2:8080/api/products";
      final String shareText =
          '‚ú® Kh√°m ph√° ngay s·∫£n ph·∫©m tuy·ªát v·ªùi t·∫°i c·ª≠a h√†ng c·ªßa t√¥i! üõí\n\nüîó Xem chi ti·∫øt t·∫°i: $productLink\n\nH√£y gh√© qua v√† l·ª±a ch·ªçn m√≥n ƒë·ªì y√™u th√≠ch c·ªßa b·∫°n! ‚ù§Ô∏è';
      Share.share(shareText);
    }

    return FutureBuilder<Map<String, dynamic>>(
      future: _getRatingData(), // L·∫•y d·ªØ li·ªáu ƒë√°nh gi√°
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const CircularProgressIndicator(); // ƒêang ch·ªù d·ªØ li·ªáu
        } else if (snapshot.hasError) {
          return Text('Error: ${snapshot.error}');
        } else if (snapshot.hasData) {
          final double averageRating = snapshot.data?['averageRating'] ?? 0.0;
          final int totalRatings = snapshot.data?['totalRatings'] ?? 0;

          return Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Row(
                children: [
                  Icon(Iconsax.star5, color: Colors.yellow, size: 24),
                  const SizedBox(width: TSize.spaceBtwItems / 2),
                  Text.rich(
                    TextSpan(
                      text: averageRating.toStringAsFixed(1),
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                      children: [
                        TextSpan(
                          text: ' ($totalRatings reviews)',
                          style: const TextStyle(
                            fontSize: 16,
                            color: Colors.grey,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),

              // Share Icon
              IconButton(
                onPressed: _shareProduct,
                icon: const Icon(Icons.share, size: 24),
              ),
            ],
          );
        } else {
          return const Text('No data available');
        }
      },
    );
  }

  // H√†m g·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu ƒëi·ªÉm trung b√¨nh v√† t·ªïng s·ªë ƒë√°nh gi√°
  Future<Map<String, dynamic>> _getRatingData() async {
    // Kh·ªüi t·∫°o RatingService
    RatingService ratingService = RatingService();

    try {
      // L·∫•y th√¥ng tin ƒë√°nh gi√° t·ª´ API
      double averageRating = await ratingService.getAverageRating(productId);
      int totalRatings = await ratingService.getTotalRatings(productId);

      return {'averageRating': averageRating, 'totalRatings': totalRatings};
    } catch (e) {
      // X·ª≠ l√Ω khi c√≥ l·ªói x·∫£y ra

      return {'averageRating': 0.0, 'totalRatings': 0};
    }
  }
}
